// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int       @id @unique @default(autoincrement())
  email        String    @unique
  title        String?
  firstName    String?
  lastName     String?
  passwordHash String?
  role         Role      @default(TEACHER)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  invites      Invite[]  @relation("UserInvites")
  teach        teach[]
  contact      contact[]
}

model Invite {
  id          Int          @id @unique @default(autoincrement())
  email       String
  title       String?
  firstName   String?
  lastName    String?
  status      InviteStatus @default(PENDING)
  token       String       @unique
  link        String
  invitedById Int
  invitedBy   User         @relation("UserInvites", fields: [invitedById], references: [id])
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Course_year {
  id               Int                @id @unique @default(autoincrement())
  year             Int                @unique
  Tuition_fees     Tuition_fees?
  Education_sector Education_sector[]
  subject          subject[]
  status           PublishStatus      @default(DRAFT)
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
}

model Tuition_fees {
  id             Int         @id @unique @default(autoincrement())
  normal         Int?
  summer         Int?
  course_year_id Course_year @relation(fields: [course_yearId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  course_yearId  Int         @unique
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
}

model Education_sector {
  id             Int          @id @unique @default(autoincrement())
  course_year_id Course_year? @relation(fields: [course_yearId], references: [id])
  year           Int?
  semester       Int?
  course_yearId  Int?
  subject        subject[]
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model subject {
  id                  Int               @id @unique @default(autoincrement())
  name                String?
  credit              Int?
  language            String?
  isRequire           Boolean?
  Education_sector_id Education_sector? @relation(fields: [education_sectorId], references: [id])
  education_sectorId  Int?
  Course_year_id      Course_year?      @relation(fields: [course_yearId], references: [id])
  course_yearId       Int?
  teach               teach[]
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
}

model teach {
  id         Int     @id @unique @default(autoincrement())
  user_id    User    @relation(fields: [userId], references: [id])
  subject_id subject @relation(fields: [subjectId], references: [id])
  userId     Int
  subjectId  Int
}

model contact_type {
  id        Int       @id @unique @default(autoincrement())
  type_name String
  contact   contact[]
}

model contact {
  id             Int          @id @unique @default(autoincrement())
  contact_type   contact_type @relation(fields: [contact_typeId], references: [id])
  contact_detail String
  user           User         @relation(fields: [userId], references: [id])
  contact_typeId Int
  userId         Int
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

enum Role {
  TEACHER
  ADMIN
  SUPER_ADMIN
}

enum InviteStatus {
  PENDING
  ACCEPTED
  EXPIRED
}

enum PublishStatus {
  DRAFT
  PUBLISHED
}
